{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Hexo+GitHub个人博客搭建","slug":"Hexo-GitHub个人博客搭建","date":"2025-06-22T15:16:08.000Z","updated":"2025-06-22T15:16:08.257Z","comments":true,"path":"2025/06/22/Hexo-GitHub个人博客搭建/","permalink":"http://example.com/2025/06/22/Hexo-GitHub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445# Hexo+GitHub搭建个人博客摘要：本文以up主[CodeSheep](https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=91e373e2cbd270e06a052e77397b7938)从零开始搭建自己的个人博客 视频为框架，记录本人从零搭建个人博客的过程，重点表述搭建过程中遇到bug如何解决，以及补充视频没有的细节，文章以图文形式呈现。## 第一章 博客环境搭建搭建设备：联想ThinkBook14P、Win11- 1.1 安装Nodejs- 1.2 安装hexo博客框架- 1.3 使用hexo进行博客框架### 1.1 Node.js安装进入&lt;https://www.nodejs.org&gt;即可进行安装对应系统版本的node.js![](https://raw.githubusercontent.com/Shiaoming123/Picgo_image/main/img/20250622183248497.png)随后进入软件的下载界面：![](https://raw.githubusercontent.com/Shiaoming123/Picgo_image/main/img/20250622183248616.png)一路点击next，到达安装路径时确保安装路径在自己想要安装的位置![](https://raw.githubusercontent.com/Shiaoming123/Picgo_image/main/img/20250622183248762.png)自主选择是否安装时候自动安装对应的工具Tool![](https://raw.githubusercontent.com/Shiaoming123/Picgo_image/main/img/20250622183248963.png)在PowerShell控制界面中查看npm的版本，后续创建网站需要用到该包![](https://raw.githubusercontent.com/Shiaoming123/Picgo_image/main/img/20250622183249168.png)---### 1.2 安装hexo博客框架在刚才打开的powershell中输入`npm install -g cnpm --registry=http://registry.npm.taobao.org`来安装淘宝的cnpm镜像源，下载速度比较快&gt; 但是如果自己有挂vpn或者已经有其他镜像源的话可以自行决定是否进行这一步下面时对应cnpm的版本信息![](https://raw.githubusercontent.com/Shiaoming123/Picgo_image/main/img/20250622183249362.png)接着使用```cnpm install -g hexo-cli```安装hexo框架![](https://raw.githubusercontent.com/Shiaoming123/Picgo_image/main/img/20250622183249526.png)可以使用```hexo -v```验证安装好的的hexo版本信息![](https://raw.githubusercontent.com/Shiaoming123/Picgo_image/main/img/20250622183249685.png)---### 1.3 使用hexo进行博客框架```powershellpwd #查看当前目录mkdir blog #创建blog文件夹 这里我将blog项目文件夹放在了E:\\Self-Web\\Sheep跟做这个目录下，之后项目有任何问题，可以直接删除blog文件夹重来。 最后在powershell中输入cd ./blog进入我们的项目文件夹 随后输入sudo hexo init使用超级管理员身份生成一个初始化博客 在win上应该直接输入hexo init就可以了，会自动下载对应所需要的依赖文件 此时可以看到文件夹中生成了一些我们创建个人博客所必须的项目文件。使用ls可以查看当前文件夹下的文件组成 启动博客输入hexo s即可启动本地博客服务此时的本地端口访问地址是：http://localhost:4000/ 随后即可在默认浏览器中进入hexo的初始前端界面平常就是使用hexo s进行本地环境下的个人网页测试预览常用的hexo指令如下 12345hexo n &quot;健康养生护理&quot; # 创建一篇名为“健康养生护理”的新博客hexo s # 运行hexo本地服务hexo clean # 清理本地端口页面hexo g # 生成静态文件(每次创建完一篇新博客之后都需要在项目主文件夹blog路径下输入)hexo d # 部署到远程站点 之后输入hexo n &quot;xxx的第一篇博客文章&quot;就可以创建你的第一篇博客了 记住此时需要输入ctrl + c结束我们的本地端口访问再输入对应指令创建博客 在得到我们的第一篇博客后，可以进入我们的E:\\Self-Web\\Sheep跟做\\blog\\source\\_posts\\路径下查看我们新创建好的博客文档 在创建好第一篇博客文章之后，进行以下步骤完成第一次博客文章的前端页面更新： 回到我们的blog主文件夹输入两次回退指令cd ../.. 首先输入hexo clean清理本地端口页面和缓存 随后输入hexo g生成新博客的静态文件 输入hexo s本地启动我们的博客页面。 此时再启动服务之后，刷新我们的本地博客页面，即可看到我们的博客首页已经更新了。 第二章 Github远程服务器搭建目的：方便以后直接通过github这个网址直接访问我们的博客基本步骤如下： 2.1 登录Github创建项目仓库创建完成之后会出现如下界面： 其中项目命名是有对应格式要求的 2.2 安装git工具(这里我之前已经安装过了，这里就不演示了)2.3 在blog目录下安装git部署插件输入命令行cnpm install --save hexo-deployer-git 2.4 打开blog文件夹下的_config.yml文件进行设置在文件的最后需要对Deployment进行相应的设置将该部分修改成如下： 12345678910# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: git@github.com:Shiaoming123/Shiaoming123.github.io.git ## 这里填的是SSH地址，如果你使用HTTPS地址， ## 请将其改为：https://github.com/Shiaoming123/Shiaoming123.github.io.git ## 最好选SSH地址，因为HTTPS地址需要每次都输入用户名和密码 branch: main ## 在老版本的github中，默认分支是master 视频里填的是HTTPS地址，先说明一下如果填写那个地址以后每次部署到远端就需要输入密码登录一次，非常麻烦。填写SSH地址为的是后面免密hexo d，需要将 Mac上ssh密钥添加到GitHub上，但绝对是一劳永逸的操作！ 2.5 命令行中输入hexo d进行部署 报错分析：显示fatal: unable to auto-detect email address (got &#39;Wuling@DESKTOP-SKF1DTT.(none)&#39;)因为前面使用的是SSH地址，所以这里需要再加一步配置SSH连接密钥 2.5.1 Github的SSH密钥配置SSH:SSH(Secure SHell):是一个提供数据通信安全、远程登录、远程指令执行等功能的安全网络协议，使用ssh往GitHub上push项目，不需要再次输入账号密码。 设置git运行下面命令行配置自己的name和email 1git config --list #查看配置 12git config --global user.name &quot;你的用户名&quot;git config --global user.email &quot;你的邮箱&quot; Github SSH密钥配置 检查是否存在SSH Key输入cd /.ssh和ls查看SSH配置文件夹内的内容，若是存在id_rsa和id_sra.pub文件，说明已经有SSH key了，没有则创建新的 创建新的ssh key输入下面的命令行 123ssh-keygen -t rsa -C&quot;你的邮箱&quot; #-t ：密钥的类型#-C : 用于识别密钥的注释 会发现 .ssh 目录生成了两个文件：id_rsa和id_rsa.pubid_rsa 文件是私有密钥，id_rsa.pub是公开密钥 获取ssh key公钥内容输入cat ./id_rsa.pub获取id_rsa.pub中的公钥内容 添加公钥到github将前面获取到的公钥添加到github中 验证是否设置成功用私有密钥与GitHub进行认证和通信 1ssh -T git@github.com 出现以下提示说明连接成功 随后返回到我们的blog主文件夹路径下，输入hexo d即可完成远端部署 此时查看github仓库，即可发现对应文件都已装载进github对应项目仓库中 此时输入我们的域名即可进入我们的博客界面http://shiaoming123.github.io或者&lt;shiaoming123.github.io&gt; 第三章 更换blog页面主题yilia NexT butterfly 3.1 yilia主题更换1. 进入blog路径下，使用git clone指令克隆对应项目到blog/themes/yilia文件夹中， 1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 2. 打开_config.yml文件，修改theme对应配置为yilia 12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/# theme: landscapetheme: yilia 3. 随后hexo clean–&gt;hexo g–&gt;hexo s此时可以看到我们的页面主题已经变成了yilia主题样式 4. 输入hexo d将编辑好的页面推到远端github服务器 进入界面有可能不会立马生效，可以尝试刷新一下即可正常显示 第四章 图床配置在使用中我们可以发现，blog中的图片链接使用的都是基于本地当前文件夹下的相对路径，想要在我们的远端服务器中显示图片，还需要将图片也使用图床等额外配置才可以实现正常的显示功能。这里我们使用Picgo作为我们的图床使用工具。 4.1 PicGo下载Picgo下载链接：https://github.com/Molunerfinn/PicGo/releases 下载完成之后，运行exe文件选择对应的下载路径即可完成安装。 4.2 创建Github图床存储仓库在下载Picgo之后，我们还需要使用云服务器存储我们的图片文件，这里我们依旧使用github仓库作为我们图片的存储媒介。1. 创建一个新的github仓库，仓库命名随意，需要将权限设置为Public才可以正常使用，可以选择是否创建README.md文件 2. 将Picgo链接到github项目仓库打开Picgo左侧的“图床设置”中的“GitHub”，设置我们的图床配置文件按照我们前面图床仓库的相关信息填入对应框中，其中token需要在github中获取 3. 获取token打开github的setting，在左侧的“开发者设置”中，创建一个新的token，选择classic 其中一些设置需要进行注意调整：Note：为该token创建一个识别名Expiration：设置该tokens的使用时长，若长期使用，可以设置为custom来自己设置token过期时间，或者选择No expiration无期限。随后后面的repo对应权限需要勾选 随后创建token即可得到一串属于我们图床的token，复制粘贴到我们的PicGo的token一栏中 随后在我们的“图片上传”处选择我们的对应github配置即可进行我们的图床配置 1","categories":[],"tags":[],"author":"John Doe"},{"title":"Hello World","slug":"hello-world","date":"2025-06-22T10:58:50.000Z","updated":"2025-06-22T10:58:50.823Z","comments":true,"path":"2025/06/22/hello-world/","permalink":"http://example.com/2025/06/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}